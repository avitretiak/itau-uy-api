name: Create Release and Publish to PyPI

on:
  push:
    branches:
      - main

jobs:
  create-release-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Check version change
        id: check_version
        run: |
          git fetch --tags
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          if [ "v$CURRENT_VERSION" != "$LATEST_TAG" ]; then
            echo "Version changed from $LATEST_TAG to v$CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.check_version.outputs.version_changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.check_version.outputs.new_version }}
          release_name: Release v${{ steps.check_version.outputs.new_version }}
          body: |
            Release of version ${{ steps.check_version.outputs.new_version }}
            
            For full changes, see the [changelog](CHANGELOG.md).
          draft: false
          prerelease: false

      - name: Install build dependencies
        if: steps.check_version.outputs.version_changed == 'true'
        run: uv pip install build

      - name: Build package
        if: steps.check_version.outputs.version_changed == 'true'
        run: uv run build

      - name: Publish to PyPI
        if: steps.check_version.outputs.version_changed == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/

      - name: Minimize uv cache
        run: uv cache prune --ci
